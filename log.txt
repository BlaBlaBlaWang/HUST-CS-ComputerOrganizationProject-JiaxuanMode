差异化指令
SLLV 走马灯
PC3需要是PC+4的值
SLLV需要调换ALU中的操作数
之前的ORI和ANDI没有进行无符号扩展，ADDIU的理解也不准确

SLTIU 倒计时到1949

LBU 先存储再正着数	需要额外增加的是选择byte的支持
需要分别处理字、字节偏移

BLTZ 从F……F1数到F……FF 利用PC选择器电路，之前的10情况
不要乱用SYSCALL信号来搞他，以免引起SYSCALL支持电路的错误，直接在ALU中放常量


气泡流水线遇到的问题
部分接口Reg未加CLK与清零
RegWrite类别的使能忽略了No.4阶段
源寄存器使用情况逻辑电路自动生成表格中，漏掉了前三条
sw和lw的源寄存器使用情况写错
检查用输出连错位
修改了RW的使能，现在RW的使能只与RW5有关，而判断数据相关会同时用到RW345
修改了RDin的来源，JAL使用第5段
修改了W#的来源，JAL使用第5段
将SYSCALL停机部分的来源改成第五段
差异化指令忘记将对应的信号修改为流水线正确阶段的信号

在气泡流水线基础上完成重定向流水线
修改了debug计数器的限制数，然后就蜜汁通过了第一个节拍
PCO的多路选择器一开始选择端悬空，导致不能从0端正常更新
修改了forward信号的优先编码器，以及多路选择器的输入
修改了源寄存器使用情况，syscall的时候rt并没有被使用
3阶段B操作数已经被重定向，而4阶段写入的数据还是原先的B，不合适；并且创建新的信号后也要为它设置流水接口部件和使能
牵扯到之前的错误，冲突检测中，RegWrite需要和3、4阶段对应，第5阶段反而多余
341
没有弄明白B重定向要重定向啥，实际上要重定向的是“B”，不包含立即数，调整多路选择器的顺序
重定向的时候LB指令的MEM重定向信号不正确，最后重构了LB数据通路

流水中断
需要将中断处理电路中对指令译码的支持，IR使用取指令阶段而不是译码阶段的
牵扯到之前的错误，SYSCALL应该在excel中标识两个寄存器均使用，而之前的测试中syscall没有立即显示对应的数字，因而逃过一劫
牵扯到之前的错误，eret时才清空中断寄存器，修改成INTR时，

上板
上板之前要严格按照几个文档进行转化
上板之后，器件.v副本的形成，与器件在logisim中有没有命名没有关系
转化之后，要在vivado中修改各种语法错误，书写testbench，进行行为仿真，再生成比特流之后烧板
在单周期上板的过程中，寄存器文件和触发器文件的内部逻辑十分诡异，使用了李永康魔改后的版本
然后，大改时序，使用分频器和全局时钟代替clocktree，同时修改testbench的初始化时间部分来适应新的时钟，特别的，FPGAdigit使用全局时钟而非分频后
去掉了存储器件的tick同时钟相逻辑的操作，还把D触发器去掉了
去掉了ALU等诸多器件中没有必要的CLK端口
Regfile将logisim中忽略的下降沿改成上升沿确保万无一失
初始化Regfile，single电路加入reset信号

但后来发现单周期上板并不需要修改太多东西，之前只是仿真的时候频率不合适，且没有持续运行看到全貌，实际上，修改完语法错误后，只要将PC的使能从D触发器变成翔宇的思路就OK了

流水上板
为了保证PC使能不再出现以前的问题，这次在logisim里修改使能信号为组合逻辑后，再进行转换与上板的工作
修改完语法错误后，遇到了三大问题，中断不能使用，rst引脚绑定失败，以及benchmark运行错误
对于中断不能使用，不是主要矛盾，并且中断支持电路中用到了大量的D触发器，修改过于繁琐，因此搁置
对于rst引脚绑定失败，通过查找CPU原始封装中，与rst信号直接相关的线网连到了哪里，发现两个意义不明且在logisim中没有出现过的D触发器最终将rst作为它们的输出，输入对输出，导致rst绑定失败，注释掉对应模块后即输出正常
对于benchmark运行时gen在ffffffff处的错误，使用行为仿真，查看gen在那里时PC的使能，发现使能为0，最终寻到使能连接错误，原来是logisim里连错，修改后重新转换并修改语法错误即恢复正常


流水中断重构
分支仍在EX段分支，EPC的输入需要重构，前面的流水接口也有必要插入气泡
mtc0要用EX段，否则关后却分支则白白的关闭了中断
mfc0用IF段即可，因为它前后是正常的逻辑，打开中断前现场已经保存完毕，开中断没有白白一说
eret要用IF，因为后面可能会取中断处理程序之外的指令
PCenable不能和CLK相与，而要放在置位端，因为会通过毛刺影响后续的新的时钟信号
